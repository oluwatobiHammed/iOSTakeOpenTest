//
//  FormFieldViewModel.swift
//  iOSTakeOpenTest
//
//  Created by Oladipupo Oluwatobi on 16/06/2020.
//  Copyright Â© 2020 Oladipupo Oluwatobi. All rights reserved.
//

import Foundation
import RxSwift
import RxCocoa

class FormFieldViewModel {
    
    private let disposeBag = DisposeBag()
    
    var name: String
    var _value: BehaviorRelay<Any?> = BehaviorRelay<Any?>(value: nil)
    var _isRequiredvalue: BehaviorRelay<Any?> = BehaviorRelay<Any?>(value: nil)
    var value: Any? {
        set {
            _value.accept(newValue)
        }
        
        get {
            return _value.value
        }
    }
    
    var isRequiredValue: Any? {
           set {
                _isRequiredvalue.accept(newValue)
           }
           
           get {
               return _isRequiredvalue.value
           }
       }
    
    var isRequired: Bool? {
        guard let value = isRequiredValue else {
            return nil
        }
        return value as? Bool
    }
        
    var type: FormFieldType
    var errorValidateInfo: String? = nil
    var validator: Validator?
    var isValid = BehaviorRelay(value: false)
    var isMandatory = BehaviorRelay(value: false)
    
    var textValue: String? {
        guard let value = value else {
            return nil
        }
        return "\(value)"
    }
    
    init(name: String, value: Any?,isMandatory: Any?, type: FormFieldType, validator: Validator?) {
        self.name = name
        self._value.accept(value)
         self._isRequiredvalue.accept(isMandatory)
        self.type = type
        self.validator = validator
        
        self._value
            .asObservable()
            .subscribe { [weak self] (event) in
                do {
                    try self?.validate()
                    self?.isValid.accept(true)
                } catch {
                    self?.isValid.accept(false)
                }}
            .disposed(by: disposeBag)
        
        self._isRequiredvalue
                 .asObservable()
                 .subscribe { [weak self] (event) in
                     do {
                         try self?.validate()
                         self?.isMandatory.accept(true)
                     } catch {
                         self?.isMandatory.accept(false)
                     }}
                 .disposed(by: disposeBag)
    }
    
    func validate() throws {
        errorValidateInfo = nil

        if let validator = validator  {
            do {
                try validator.validate(name: name, value: value, isRequired: isRequiredValue)
            } catch {
                errorValidateInfo = error.localizedDescription
                throw error
            }
        }
    }
}
