//
//  ViewController.swift
//  iOSTakeOpenTest
//
//  Created by Oladipupo Oluwatobi on 09/06/2020.
//  Copyright Â© 2020 Oladipupo Oluwatobi. All rights reserved.
//

import UIKit
import RxCocoa
import RxSwift
class Page1ViewController: BaseTableviewController {
    @IBOutlet weak var nextButton: UIButton!
    @IBOutlet weak var headerTitleLabel: UILabel!
    @IBOutlet weak var backButton: UIButton!
    var isTrue = Bool()
    var name  = Bool()
    var phone = Bool()
    var email = Bool()
    var dob = Bool()
    var contrain = Bool()
    
    var pages = [Pages]()
    var textField: DesignableTextField?
    var firstSection = [Sections]()
    override func viewDidLoad() {
        super.viewDidLoad()
        nextButton.layer.cornerRadius = 7
        nextButton.isEnabled = false
        nextButton.alpha = 0.7
        
        
        
    }
    
    
    
    override func doLoadData(callback: @escaping (([Any]) -> Void)) {
        if let data = DataLoader().userData?.pages?[currentPage].sections {
            callback(data)
            navigationItem.title = data[0].label
            navigationItem.largeTitleDisplayMode = .always
            //headerTitleLabel.text = data[0].label
        }
    }
    
//    override func viewWillAppear(_ animated: Bool) {
//        super.viewWillAppear(animated)
//        navigationController?.setNavigationBarHidden(true, animated: false)
//    }
    
//    override func viewDidDisappear(_ animated: Bool) {
//        navigationController?.setNavigationBarHidden(false, animated: true)
//    }
    
    override func parameterBuilder () {
      
        if currentPage == 0 {
            backButton.alpha = 0
        }else {
            for i in 0..<arrayOfCells.count {
               arrayOfCells[i].textField.text = ""
                arrayOfCells[i].pickView.text = ""
            }
            
            
        }
     
        
        
        let builder = FormBuilder.Builder()
        
        for i in 0..<arrayOfCells.count {
            arrayOfCells[i].errorLabel.alpha = 0
            if arrayOfCells[i].data.label == "Email address" {
                if let email = arrayOfCells[i].textField.text{
                    builder.email = email
                }
                
            }
            if arrayOfCells[i].data.label == "Your fullname" {
                if let fullname = arrayOfCells[i].textField.text{
                    builder.fullname = fullname
                }
                
            }
            
            if arrayOfCells[i].data.label == "Phone Number" {
                if let phonenumber = arrayOfCells[i].textField.text{
                    builder.phoneNumber = phonenumber
                }
                
            }
            
            if arrayOfCells[i].data.label == "Date of Birth" {
                if let dob = arrayOfCells[i].textField.text{
                    builder.dob = dob
                }
                
            }
        }
        
    }
    
    override func istoValidatePage2() {
        for i in 0..<arrayOfCells.count {
            arrayOfCells[i].textField.resignFirstResponder()
            if arrayOfCells[i].data.isMandatory == true && arrayOfCells[i].textField.hasText != true {
                if arrayOfCells[i].data.label ==  "Do you have a yard?" {
                    isValidated = false
                    arrayOfCells[i].errorLabel.alpha = 1
                    self.arrayOfCells[i].errorLabel.textWithAnimation(text: "This field is required" , duration: 0.5)
                    self.arrayOfCells[i].errorLabel.layoutIfNeeded()
                }
                
            }else {
                isValidated = true
                arrayOfCells[i].errorLabel.alpha = 0
            }
            
            if arrayOfCells[i].data.label ==  "Do you have a yard?" {
                if isValidated == true {
                    currentPage = 2
                    nextButton.alpha = 1
                    nextButton.isEnabled = true
                }else {
                    currentPage = 1
                    nextButton.alpha = 0.7
                    nextButton.isEnabled = false
                }
            }
            
            
        }
        
    }
    
    override func istoValidatePage3() {
        for i in 0..<arrayOfCells.count {
            arrayOfCells[i].textField.resignFirstResponder()
            if arrayOfCells[i].data.isMandatory == true && arrayOfCells[i].textField.hasText != true {
                if arrayOfCells[i].data.label ==  "Please provide the name of a personal reference" {
                    isValidated = false
                    arrayOfCells[i].errorLabel.alpha = 1
                    self.arrayOfCells[i].errorLabel.textWithAnimation(text: "This field is required" , duration: 0.5)
                }
            }else {
                isValidated = true
                arrayOfCells[i].errorLabel.alpha = 0
            }
            
            if arrayOfCells[i].data.label ==  "Please provide the name of a personal reference" {
                if isValidated == true {
                    currentPage = 2
                    nextButton.alpha = 1
                    nextButton.isEnabled = true
                }else {
                    //currentPage = 2
                    nextButton.alpha = 0.7
                    nextButton.isEnabled = false
                }
            }
            
        }
        
    }
    
    func secondPageParameterBuilder () {
        let builder = FormBuilder.Builder()
        for i in 0..<arrayOfCells.count {
            
            if arrayOfCells[i].data.label == "Do you have a yard?" {
                if let questionOne = arrayOfCells[i].textField.text{
                    builder.questionOne = questionOne
                }
                
            }
            if arrayOfCells[i].data.label == "Is it fenced? Also indicate the type" {
                if let questiontwo = arrayOfCells[i].textField.text{
                    builder.questiontwo = questiontwo
                }
                
            }
            
        }
        
    }
    override func istoValidate() {
        for i in 0..<arrayOfCells.count {
            //addToolBar(textField: arrayOfCells[i].textField)
            arrayOfCells[i].textField.resignFirstResponder()
            arrayOfCells[i].pickView.resignFirstResponder()
            if arrayOfCells[i].data.isMandatory == true && arrayOfCells[i].textField.hasText != true && arrayOfCells[i].pickView.hasText != true  {
                arrayOfCells[i].errorLabel.alpha = 1
                arrayOfCells[i].pickerErrorLabel.alpha = 0
                self.arrayOfCells[i].errorLabel.textWithAnimation(text: "This field is required" , duration: 0.9)
                if  arrayOfCells[i].data.label ==  "Date of Birth" {
                    arrayOfCells[i].errorLabel.alpha = 0
                    arrayOfCells[i].pickerErrorLabel.alpha = 1
                    self.arrayOfCells[i].pickerErrorLabel.textWithAnimation(text: "This field is required" , duration: 0.9)
                }
                
            }
            else {
                
                if arrayOfCells[i].data.label ==  "Email address" {
                    arrayOfCells[i].errorLabel.alpha = 1
                    let error = arrayOfCells[i].validate ? "" : "Email is not valid"
                    self.arrayOfCells[i].errorLabel.textWithAnimation(text: error , duration: 0.9)
                }
                
                if arrayOfCells[i].data.label ==  "Phone Number"{
                    arrayOfCells[i].errorLabel.alpha = 1
                    let error = arrayOfCells[i].validateOther ? "" : "Must contain exactly 11 charaters"
                    self.arrayOfCells[i].errorLabel.textWithAnimation(text: error , duration: 0.9)
                }
                
                
                
                
                
                
            }
            
            if arrayOfCells[i].data.label ==  "Email address" {
                print("This is the email ",arrayOfCells[i].validate)
                if arrayOfCells[i].validate == true {
                    email = true
                }else {
                    email = false
                }
                
            }
            if arrayOfCells[i].data.label ==  "Phone Number"{
                if arrayOfCells[i].validateOther == true {
                    phone = true
                }else{
                    phone = false
                }
                
            }
            
            if  arrayOfCells[i].data.label ==  "Your fullname" {
                textField = arrayOfCells[i].textField
                print("This is the name ",arrayOfCells[i].nameValidator)
                if arrayOfCells[i].nameValidator == true {
                    name = true
                }else {
                    name = false
                }
                
            }
            
            if  arrayOfCells[i].data.label ==  "Date of Birth" {
                print("This is the dob",arrayOfCells[i].dobValidator)
                if arrayOfCells[i].dobValidator == true {
                    dob = true
                }else {
                    dob = false
                }
                
            }
            if phone == true && name == true && email == true && dob == true  {
                isTrue = true
                
            }else {
                isTrue = false
            }
            print("This is the current page",currentPage)
            print("This actual value",isTrue)
            if isTrue == true {
                currentPage = 1
                nextButton.alpha = 1
               
                self.nextButton.isEnabled = true
            }else{
                currentPage = 0
                nextButton.alpha = 0.7
                self.nextButton.isEnabled = false
            }
            
            
        }
    }
    
    @IBAction func backButtonPressed(_ sender: UIButton) {
        //istoValidate()
        currentPage -= 1
        
        
               if let pages = DataLoader().userData?.pages {
                   if currentPage == pages.count - 1 {
                              nextButton.setTitle("Submit", for: .normal)
                   }else  {
                       nextButton.setTitle("Next", for: .normal)
                   }
                   if currentPage < pages.count {
                       //istoValidate()
                       if let data = DataLoader().userData?.pages?[currentPage].sections {
                           itemsToRender = data
                           navigationItem.title = data[0].label
                          // headerTitleLabel.text = data[0].label
                       }
                   }else {
                       print("No more page to  display")
                   }

               }
         //istoValidate()
       
        if currentPage == 0 {
            nextButton.alpha = 0.7
            nextButton.isEnabled = false
            backButton.alpha = 0
        }else if currentPage == 1{
            nextButton.alpha = 0.7
            nextButton.isEnabled = false
            backButton.alpha = 1
        }
        if let pages = DataLoader().userData?.pages {
            if currentPage <= pages.count {
                if let data = DataLoader().userData?.pages?[currentPage].sections {
                    itemsToRender = data
                    //headerTitleLabel.text = data[0].label
                     navigationItem.title = data[0].label
                }
            }else {
               
            }
            
        }
        print(currentPage)
    }
    
    @IBAction func btnStart(_ sender: UIButton) {
//        if let pages = DataLoader().userData?.pages {
//                   if currentPage < pages.count - 1 {
//                    currentPage += 1
//            }
//
//        }
        
               if let pages = DataLoader().userData?.pages {
                   if currentPage == pages.count - 1 {
                              nextButton.setTitle("Submit", for: .normal)
                   }else  {
                       nextButton.setTitle("Next", for: .normal)
                   }
                   if currentPage < pages.count {
                       //istoValidate()
                       if let data = DataLoader().userData?.pages?[currentPage].sections {
                           itemsToRender = data
                           navigationItem.title = data[0].label
                          // headerTitleLabel.text = data[0].label
                       }
                   }else {
                       print("No more page to  display")
                   }

               }
        if currentPage == 0 {
            parameterBuilder()
            nextButton.alpha = 0.7
            nextButton.isEnabled = false
             istoValidatePage2()
            backButton.alpha = 0
        }else if currentPage == 1{
            nextButton.alpha = 0.7
            nextButton.isEnabled = false
            backButton.alpha = 1
        }
         
        print(currentPage)
       
    }
}


extension Page1ViewController {
    
     func parameterBuilderPage2 () {
        let builder = FormBuilder.Builder()
         for i in 0..<arrayOfCells.count {
             
             if arrayOfCells[i].data.label == "Do you have a yard?" {
                 if let questionOne = arrayOfCells[i].textField.text{
                     builder.questionOne = questionOne
                 }
                 
             }
             if arrayOfCells[i].data.label == "Is it fenced? Also indicate the type" {
                 if let questiontwo = arrayOfCells[i].textField.text{
                     builder.questiontwo = questiontwo
                 }
                 
             }
             
         }
         
         //let _ = StoryBoardsID.boardMain.navigationProvider.requestNavigation(to: ViewControllerID.Page3ViewController.rawValue, from: self, requestData: requestData)
     }
}


