//
//  BaseTableviewController.swift
//  iOSTakeOpenTest
//
//  Created by Oladipupo Oluwatobi on 13/06/2020.
//  Copyright Â© 2020 Oladipupo Oluwatobi. All rights reserved.
//

import UIKit
class BaseTableviewController: BaseViewController {
    @IBOutlet weak var tableView: UITableView!
    var delegateAdapter: UITableViewDelegate?
    
    var arrayOfCells: [TextFieldTableViewCell] = []
    var cell: TextFieldTableViewCell!
    var isValidated =  Bool()
    var itemsToRender: [Any] = [] {
        didSet {
            DispatchQueue.main.async {
                self.tableView?.reloadData()
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        prepareTableView()
    }
    
    func prepareTableView(){
           tableView.separatorStyle = .none
           tableView.rowHeight = UITableView.automaticDimension
           tableView.estimatedRowHeight = 44
           tableView.backgroundColor = UIColor.clear
           tableView.allowsSelection = false
           self.tableView?.dataSource = self
           self.tableView?.delegate = self
          tableView.addTapGesture {
                 self.tableView.endEditing(true)
                 self.istoValidate()
             }
             view.addTapGesture {
                 self.view.endEditing(true)
                 self.istoValidate()
             }
           self.doLoadData(callback: self.onNewDataLoaded)
       }
    
    
    func doLoadData(callback: @escaping ((_ loadedData: [Any])-> Void)) {
           
       }
    fileprivate func onNewDataLoaded(result: [Any]) {
        self.itemsToRender.removeAll()
         self.itemsToRender.append(contentsOf: result)
         
     }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        tableView.reloadData()
        navigationController?.setNavigationBarHidden(true, animated: false)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        navigationController?.setNavigationBarHidden(false, animated: true)
    }
    
    func parameterBuilder () {
        
    }
    func istoValidate() {
        
    }
    
    
    
    
    
}

extension BaseTableviewController: UITableViewDataSource, UITableViewDelegate {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        if let itemsToRender = itemsToRender as? [Sections] {
            return itemsToRender.count
        }
        return 1
    }
    
    func tableView(_ tableView: UITableView, didEndEditingRowAt indexPath: IndexPath?) {
        arrayOfCells[(indexPath?.row)!].textField.text = cell.textField.text
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if let itemsToRender = itemsToRender as? [Sections] {
            return itemsToRender[section].elements!.count
        }
        return itemsToRender.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "inputfield", for: indexPath) as? TextFieldTableViewCell
        if let itemsToRender = itemsToRender as? [Sections] {
            cell?.data = itemsToRender[indexPath.section].elements?[indexPath.row]
            let textField: UITextField = (cell?.textField)!
            textField.delegate = self
            arrayOfCells += [cell!]
        }
        
        cell?.selectionStyle = .none
        cell?.addTapGesture {
            cell?.endEditing(true)
            self.istoValidate()
        }
        
        return cell!
    }
    
    
}


extension BaseTableviewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        
        // Verify all the conditions
        if let sdcTextField = textField as? DesignableTextField {
            return sdcTextField.verifyFields(shouldChangeCharactersIn: range, replacementString: string)
        }
        return false
    }
}

