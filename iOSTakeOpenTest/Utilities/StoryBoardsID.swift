//
//  StoryBoardsID.swift
//  iOSTakeOpenTest
//
//  Created by Oladipupo Oluwatobi on 10/06/2020.
//  Copyright Â© 2020 Oladipupo Oluwatobi. All rights reserved.
//


import Foundation
import UIKit

class DynamicViewControllerPathResolver {
    
    static let shared = DynamicViewControllerPathResolver()
    
    fileprivate init() {
        
    }
    
    var paths: [(String, Any?)] = []
    
    func presentNextViewController() {
        if paths.count > 0 {
            let first = paths.removeFirst()
            let _ = StoryBoardsID.resolvePath(path: first.0, requestData: first.1)
        }
    }
}

enum StoryBoardsID: String {
    case boardMain = "Main"
 
    
    
    func get(for controllerId: ViewControllerID)-> UIViewController? {
          let storyboard = UIStoryboard(name:self.rawValue, bundle: nil)
          return storyboard.instantiateViewController(withIdentifier: controllerId.rawValue)
      }
    var navigationProvider: UINavigationProvider {
        return self.rawValue.asStoryboard()
    }
    static func gotoStartPage(){
        let _ = StoryBoardsID.boardMain.navigationProvider.makeAsRoot(using: ViewControllerID.VC.rawValue)
    }
    func initialController()-> UIViewController? {
          let storyboard = UIStoryboard(name:self.rawValue, bundle: nil)
          return storyboard.instantiateInitialViewController()
      }
    func makeAsRoot(using: ViewControllerID)-> Bool {
          if let controller = self.get(for: using) {
              return StoryBoardsID.makeAsRoot(using: controller)
          }
          return false
      }
    
    static func makeAsRoot(using: UIViewController)-> Bool {
         if let delegate = UIApplication.shared.delegate {
             if let window = delegate.window {
                 window?.rootViewController = using
                 return true
             }
         }
         return false
     }
    
    func requestNavigation(to: ViewControllerID, requestData: Any?, mode: ViewControllerPresentationMode = .present)-> ViewControllerPresentRequest? {
           return self.requestNavigation(to: to, from: nil, requestData: requestData, mode: mode)
       }
    func navigate(to: ViewControllerID, from: UIViewController, asRoot: Bool = false, completion: (() -> Swift.Void)? = nil)-> Bool {
        if asRoot {
            return makeAsRoot(using: to)
        }
        else {
            if let to = get(for: to) {
                if let fromNavigation = from.getNavigationViewController() {
                    fromNavigation.pushViewController(to, animated: true)
                }
                else {
                    from.present(to, animated: true, completion: completion)
                }
                return true
            }
        }
        return true
    }
    
    func requestNavigation(to: ViewControllerID, from: UIViewController?, requestData: Any?, mode: ViewControllerPresentationMode = .present)-> ViewControllerPresentRequest? {
        if let controller = self.get(for: to) {
            let request = ViewControllerPresentRequest(mode: mode, viewController: controller)
            request.presenter = from
            request.requestData = requestData
            ViewControllerPresenter.shared.presentViewController(request: request)
            return request
        }
        return nil
    }
    
    static func resolvePath(path: String, requestData: Any?)-> UIViewController? {
        let splits = path.components(separatedBy: ".")
        if splits.count == 2 {
            if let storyBoard = StoryBoardsID(rawValue: splits[0]) {
                if let controllerId = ViewControllerID(rawValue: splits[1]) {
                    if let request = storyBoard.requestNavigation(to: controllerId, requestData: requestData) {
                        return request.viewController
                    }
                }
            }
        }
        return nil
    }
    
}


enum ViewControllerID: String {
  case boardMainApplicationRoot = "applicationRoot"
  case Page2ViewController = "Page2ViewController"
  case Page3ViewController = "Page3ViewController"
  case VC = "VC"
    
}

