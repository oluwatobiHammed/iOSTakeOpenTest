//
//  BaseTableviewController.swift
//  iOSTakeOpenTest
//
//  Created by Oladipupo Oluwatobi on 13/06/2020.
//  Copyright Â© 2020 Oladipupo Oluwatobi. All rights reserved.
//

import UIKit
class BaseTableviewController: BaseViewController {
    @IBOutlet weak var tableView: UITableView!
    var delegateAdapter: UITableViewDelegate?
    
    var arrayOfCells: [TextFieldTableViewCell] = []
    var cell: TextFieldTableViewCell!
    var isValidated =  Bool()
    var itemsToRender: [Any] = [] {
        didSet {
            DispatchQueue.main.async {
                self.tableView?.reloadData()
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        prepareTableView()
        
        //Notification Observers
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(notification:)), name: UIResponder.keyboardDidShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(notification:)), name: UIResponder.keyboardDidHideNotification, object: nil)
        tableView.reloadData()
        
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self, name: NSNotification.Name(rawValue: UIResponder.keyboardDidShowNotification.rawValue), object: nil)
        
        NotificationCenter.default.removeObserver(self, name: NSNotification.Name(rawValue: UIResponder.keyboardDidHideNotification.rawValue), object: nil)
    }
    
    func prepareTableView(){
        tableView.separatorStyle = .none
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 44
        tableView.backgroundColor = UIColor.clear
        tableView.allowsSelection = false
        self.tableView?.dataSource = self
        self.tableView?.delegate = self
        tableView.addTapGesture {
            self.tableView.endEditing(true)
            self.istoValidate()
        }
        view.addTapGesture {
            self.view.endEditing(true)
            self.istoValidate()
            print("This screen is tapp")
        }
        
        self.doLoadData(callback: self.onNewDataLoaded)
        
        let toolBar = UIToolbar()
          toolBar.sizeToFit()
        let flexiableSpace = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.flexibleSpace, target: nil, action: nil)
        let doneButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.done, target: self, action: #selector(self.doneClicked))
          toolBar.setItems([flexiableSpace, doneButton], animated: false)
    }
    
  @objc func doneClicked(){
      //updateTotalWorth()
      //deciPadField.resignFirstResponder()
      //deciPadField.endEditing(true)
    
    tableView.addTapGesture {
               self.tableView.endEditing(true)
               self.istoValidate()
           }
           view.addTapGesture {
               self.view.endEditing(true)
               self.istoValidate()
               print("This screen is tapp")
           }
  }
    
    func doLoadData(callback: @escaping ((_ loadedData: [Any])-> Void)) {
        
    }
    fileprivate func onNewDataLoaded(result: [Any]) {
        self.itemsToRender.removeAll()
        self.itemsToRender.append(contentsOf: result)
        
    }
    
    //    override func viewWillAppear(_ animated: Bool) {
    //        super.viewWillAppear(animated)
    //
    //
    //    }
    
    override func viewDidDisappear(_ animated: Bool) {
        
    }
    
    func parameterBuilder () {
        
    }
    func istoValidate() {
        
    }
    
    @objc func keyboardWillShow(notification: Notification) {
        if let keyboardHeight = (notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue.height {
            tableView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: keyboardHeight, right: 0)
        }
    }
    
    @objc func keyboardWillHide(notification: Notification) {
        UIView.animate(withDuration: 0.5, animations: {
            // For some reason adding inset in keyboardWillShow is animated by itself but removing is not, that's why we have to use animateWithDuration here
            self.tableView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        })
    }
    
    
    
}

extension BaseTableviewController: UITableViewDataSource, UITableViewDelegate {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        if let itemsToRender = itemsToRender as? [Sections] {
            return itemsToRender.count
        }
        return 1
    }
    
    func tableView(_ tableView: UITableView, didEndEditingRowAt indexPath: IndexPath?) {
        arrayOfCells[(indexPath?.row)!].textField.text = cell.textField.text
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if let itemsToRender = itemsToRender as? [Sections] {
            return itemsToRender[section].elements!.count
        }
        return itemsToRender.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "inputfield", for: indexPath) as? TextFieldTableViewCell
        if let itemsToRender = itemsToRender as? [Sections] {
            cell?.data = itemsToRender[indexPath.section].elements?[indexPath.row]
            let textField: UITextField = (cell?.textField)!
            textField.delegate = self
            arrayOfCells += [cell!]
        }
        
        cell?.selectionStyle = .none
        cell?.addTapGesture {
            cell?.endEditing(true)
            self.istoValidate()
        }
        
        return cell!
    }
    
    
}


extension BaseTableviewController {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        
        // Verify all the conditions
        if let sdcTextField = textField as? DesignableTextField {
            return sdcTextField.verifyFields(shouldChangeCharactersIn: range, replacementString: string)
        }
        return false
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        NotificationCenter.default.post(name: UIResponder.keyboardDidShowNotification, object: self)
    }

    func textFieldDidEndEditing(_ textField: UITextField) {
        NotificationCenter.default.post(name: UIResponder.keyboardDidHideNotification, object: self)
    }
}

